---
- name: Obtener uptime en minutos en Linux, Solaris y AIX
  hosts: all
  collections:
    - community.mysql
  gather_facts: yes
  vars:
    mysql_host: "localhost"
    mysql_user: "root"
    mysql_password: "Winner2020"
    mysql_db: "uptime"
    tabla: "registro"
    nombre: "Juan Perez"
    email: "juan.perez@example.com"
    grupoadmin: "admtmx"
    controllerserver: "bastion.local.com"
    os_type_map:
      RedHat: linux
      Debian: linux
      Suse: linux
      AlmaLinux: linux
      Solaris: solaris
      AIX: aix

  tasks:

    - name: Definir fecha y hora actual en formato MySQL
      set_fact:
        current_time: "{{ lookup('pipe', 'date +\"%Y-%m-%d %H:%M:%S\"') }}"
      delegate_to: bastion.local.com
      run_once: true

    - name: Crear Registro en la DB MySQL
      delegate_to: bastion.local.com
      community.mysql.mysql_query:
        login_host: "{{ mysql_host }}"
        login_user: "{{ mysql_user }}"
        login_password: "{{ mysql_password }}"
        login_db: "{{ mysql_db }}"
        query: |
          INSERT INTO `registro` (`fecha`, `hostname`) VALUES ('{{ current_time }}', '{{ inventory_hostname }}');
      when: inventory_hostname != controllerserver


    - name: Definir tipo de sistema operativo
      set_fact:
        os_type: "{{ os_type_map[ansible_facts['os_family']] | default('unsupported') }}"

    - name: Verificar si el sistema operativo es soportado
      fail:
        msg: "Sistema operativo no soportado: {{ ansible_facts['os_family'] }}"
      when: os_type == 'unsupported'

    - name: Consultar si la Máquina es Física o Virtual
      ansible.builtin.script: "files/getServerType.sh {{ os_type }}"
      args:
        executable: /bin/bash
      register: tiposervidor_result
      failed_when: false
      changed_when: tiposervidor_result.rc in [0, 1]

    - name: Consultar el Serial de la Máquina
      ansible.builtin.script: "files/getSerial.sh {{ os_type }}"
      args:
        executable: /bin/bash
      register: serial_result
      failed_when: false
      changed_when: serial_result.rc in [0, 1]

    - name: Consultar el Modelo de la Máquina
      ansible.builtin.script: "files/getModelServer.sh {{ os_type }}"
      args:
        executable: /bin/bash
      register: model_result
      failed_when: false
      changed_when: model_result.rc in [0, 1]

    - name: Consultar el Uptime de la Máquina
      ansible.builtin.script: files/getUptime.sh
      args:
        executable: /bin/bash
      register: uptime_result
      failed_when: false
      changed_when: uptime_result.rc in [0, 1]

    - name: Consultar Kernel Solaris (solo si es Solaris)
      ansible.builtin.shell: "pkg info entire | awk '/Branch:/ {print $2}'"
      register: kernel_result
      failed_when: false
      changed_when: kernel_result.rc in [0, 1]
      when: os_type == 'solaris'

    - name: Definir kernel (genérico o Solaris)
      set_fact:
        kernel_value: "{{ kernel_result.stdout | replace('\n', '') if os_type == 'solaris' else ansible_kernel }}"

    - name: Crear Diccionario de Información General
      set_fact:
        general_info: 
          IP: "{{ ansible_host }}"
          SO: "{{ ansible_os_family + ansible_distribution_version }}"
          KERNEL: "{{ kernel_value }}"
          ARCH: "{{ ansible_architecture }}"
          CPU: "{{ ansible_processor_cores }}"
          MEM: "{{ ansible_memtotal_mb }}"
          TIPO: "{{ tiposervidor_result.stdout | replace('\n', '') }}"
          UUID: "{{ serial_result.stdout | replace('\n', '') | replace(' ', '') }}"
          MODEL: "{{ model_result.stdout | replace('\n', '') }}"
          UPTIME: "{{ uptime_result.stdout | replace('\n', '') }}"



    - name: Actualizar información general en MySQL
      delegate_to: bastion.local.com
      community.mysql.mysql_query:
        login_host: "{{ mysql_host }}"
        login_user: "{{ mysql_user }}"
        login_password: "{{ mysql_password }}"
        login_db: "{{ mysql_db }}"
        query: |
          UPDATE registro
          SET
            `os` = '{{ general_info.SO }}',
            `cpu` = '{{ general_info.CPU }}',
            `tipo_servidor` = '{{ general_info.TIPO }}',
            `kernel` = '{{ general_info.KERNEL }}',
            `memoria` = '{{ general_info.MEM }}',
            `modelo` = '{{ general_info.MODEL }}',
            `ip` = '{{ general_info.IP }}',
            `arquitectura` = '{{ general_info.ARCH }}',
            `serial` = '{{ general_info.UUID }}',
            `uptime` = '{{ general_info.UPTIME }}'
          WHERE `fecha` = '{{ current_time }}'
            AND `hostname` = '{{ inventory_hostname }}';
      when: inventory_hostname != controllerserver
